<?php

namespace Tests\Feature\Api\rooms;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class CreateRoomTest extends TestCase {

    /**
     * A basic feature test example.
     *
     * @return void
     */
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();

        Auth::login($this->user);
    }

    public function test_if_user_is_redirected_to_login_if_not_logged_in()
    {
        Auth::logout();
        $response = $this->get('/create');

        $response->assertStatus(302);
        $response->isRedirect('/login');
    }

    public function test_if_status_is_201()
    {

        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "Test_room",
            "password" => "Test_password",
        ]);

        $response->assertStatus(201);
    }

    public function test_if_proper_content_is_returned_in_response()
    {

        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "Test_room",
            "password" => "Test_password",
        ]);

        $response->assertJsonFragment([
            "name" => "Test_room",
            "password_require" => true,
        ]);
    }

    public function test_if_content_is_inserted_into_db()
    {

        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "Test_room",
            "password" => "Test_password",
        ]);
        $id = $response->getOriginalContent()['id'];

        $this->assertDatabaseHas('rooms', ['name' => 'Test_room']);
        $this->assertDatabaseHas('users_rooms', [
            'user_id' => Auth::id(),
            'room_id' => $id,
            'online' => true,
        ]);
    }


    public function test_is_password_is_required()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "Test_room",
        ]);

        $response->assertJsonFragment([
            "name" => "Test_room",
            "password_require" => false,
        ]);
    }

    public function test_if_422_status_when_name_is_missing()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "password" => "Test_password",
        ]);

        $response->assertStatus(422);

    }

    public function test_if_proper_error_message_is_returned_when_name_is_missing()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "password" => "Test_password",
        ]);
        $response->assertJsonFragment(["message" => "The name field is required."]);

    }

    public function test_if_422_status_when_name_longer_than_20_characters()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "123456789123456789111",
            "password" => "Test_password",
        ]);

        $response->assertStatus(422);

    }

    public function test_if_proper_error_message_is_returned_when_name_is_too_long()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "123456789123456789111",
            "password" => "Test_password",
        ]);

        $response->assertJsonFragment(["message" => "The name must not be greater than 20 characters."]);

    }

    public function test_if_422_status_when_name_fewer_than_5_characters()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "1234",
            "password" => "Test_password",
        ]);

        $response->assertStatus(422);

    }

    public function test_if_proper_error_message_is_returned_when_name_is_too_short()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "1234",
            "password" => "Test_password",
        ]);

        $response->assertJsonFragment(["message" => "The name must be at least 5 characters."]);

    }

    public function test_if_422_status_when_password_is_no_longer_than_5_characters()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "Test_room",
            "password" => "1234",
        ]);

        $response->assertStatus(422);

    }

    public function test_if_proper_error_message_is_returned_when_password_is_to_short()
    {
        $response = $this->actingAs($this->user, 'api')->postJson('/api/rooms', [
            "name" => "Test_room",
            "password" => "1234",
        ]);

        $response->assertJsonFragment(["message" => "The password must be at least 5 characters."]);

    }
}
