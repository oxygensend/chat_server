<?php

namespace Tests\Feature\Api\rooms;

use App\Models\Room;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class ConnectRoomTest extends TestCase {

    /**
     * A basic feature test example.
     *
     * @return void
     */

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        Auth::login($this->user);
        $this->room = Room::factory()->create([
            'id' => uniqid(),
            'name' => 'test_room',
            'password' => hash::make("test_password"),
            'require_password' => true,
            'user_id' => auth::id(),
        ]);
        DB::table('users_rooms')->insert([
            'user_id' => Auth::id(),
            'room_id' => $this->room->id,
            'online' => false,
        ]);
    }

    public function test_if_user_is_redirected_to_login_if_not_logged_in()
    {
        Auth::logout();
        $response = $this->get('/');

        $response->assertStatus(302);
        $response->isRedirect('/login');
    }

    public function test_home_page_is_returned_sucessfull()
    {
        $response = $this->get('/');
        $response->assertStatus(200);
    }

    public function test_200_status_is_returned_after_connecting()
    {
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $this->room->id, ["name" => $this->room->name,
                "password" => "test_password"]);

        $response->assertStatus(200);
    }

    public function test_if_redirect_route_is_returned_in_response()
    {
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $this->room->id, ["name" => $this->room->name,
                "password" => "test_password"]);

        $this->assertArrayHasKey('redirect', (array)json_decode($response->content()));
    }

    public function test_if_data_is_updated_in_db()
    {
        $this->assertDatabaseHas('users_rooms', [
            'user_id' => Auth::id(),
            'room_id' => $this->room->id,
            'online' => false,
        ]);
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $this->room->id, ["name" => $this->room->name,
                "password" => "test_password"]);

        $this->assertDatabaseHas('users_rooms', [
            'user_id' => Auth::id(),
            'room_id' => $this->room->id,
            'online' => true,
        ]);
    }

    public function test_if_422_status_is_returned_when_password_is_valid()
    {
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $this->room->id, ["name" => $this->room->name,
                "password" => "valid_password"]);

        $response->assertStatus(422);
    }

    public function test_if_proper_error_msg_is_returned_in_response()
    {
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $this->room->id, ["name" => $this->room->name,
                "password" => "valid_password"]);

        $response->assertJsonFragment(['message' => 'Invalid password']);
    }

    public function test_200_status_is_returned_when_password_is_not_required()
    {
        $room = room::factory()->create([
            'id' => uniqid(),
            'name' => 'test_room',
            'require_password' => false,
            'user_id' => auth::id(),
        ]);
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $room->id, ["name" => $room->name]);

        $response->assertStatus(200);
    }

    public function test_if_redirect_rout_is_returned_when_password_is_not_required()
    {
        $room = room::factory()->create([
            'id' => uniqid(),
            'name' => 'test_room',
            'require_password' => false,
            'user_id' => auth::id(),
        ]);
        $response = $this->actingAs($this->user, 'api')
            ->patchJson('api/rooms/' . $room->id, ["name" => $room->name]);

        $this->assertArrayHasKey('redirect', (array)json_decode($response->content()));
    }
}
